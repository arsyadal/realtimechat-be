datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  messagesSent Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  chatRooms ChatRoomUser[]
  notifications Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  receiverId Int
  chatRoomId Int?
  timestamp DateTime @default(now())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], map: "Message_Sender_fkey")
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id], map: "Message_Receiver_fkey")
  chatRoom  ChatRoom? @relation(fields: [chatRoomId], references: [id], map: "Message_ChatRoom_fkey")
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  name      String
  messages  Message[]
  users     ChatRoomUser[]  
}

model ChatRoomUser {
  id        Int      @id @default(autoincrement())
  userId    Int
  chatRoomId Int
  user      User     @relation(fields: [userId], references: [id])
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])
  @@unique([userId, chatRoomId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], map: "Notification_User_fkey")
}